        -:    0:Source:test.cpp
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <cstring>
        -:    3:#include <algorithm>
        -:    4:#include <cstdio>
        -:    5:#include <fstream>
        -:    6:#include <chrono>
        -:    7:#include <map>
        -:    8:#include <vector>
        -:    9:typedef unsigned long long ull;
        -:   10:typedef struct {
        -:   11:    char* key;
        -:   12:    ull val;
        -:   13:} kv;
        -:   14:class TAvl {
        -:   15:private:
        -:   16:    struct TNode {
        -:   17:        friend class TAvl;
        -:   18:
        -:   19:        char *key;
        -:   20:        ull value;
        -:   21:        ull height;
        -:   22:        TNode *left;
        -:   23:        TNode *right;
        -:   24:
        -:   25:        TNode() : value(), height{1}, left{nullptr}, right{nullptr} {
        -:   26:            key = (char *) malloc(257);
        -:   27:        };
        -:   28:
function _ZN4TAvl5TNodeC2EPcy called 992529 returned 100% blocks executed 100%
   992529:   29:        TNode(char *k, ull v) : value{v}, height{1}, left{nullptr}, right{nullptr} {
   992529:   30:            key = (char *) malloc(257);
   992529:   31:            strcpy(key, k);
   992529:   32:        };
        -:   33:
function _ZN4TAvl5TNodeD2Ev called 992529 returned 100% blocks executed 100%
  1985058:   34:        ~TNode() {
   992529:   35:            free(key);
   992529:   36:        }
        -:   37:    };
        -:   38:
        -:   39:    TNode *root;
        -:   40:
function _ZN4TAvl6HeightEPKNS_5TNodeE called 79375198 returned 100% blocks executed 100%
 79375198:   41:    ull Height(const TNode *node) {
 79375198:   42:        return node != nullptr ? node->height : 0;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   43:    }
        -:   44:
function _ZN4TAvl7BalanceEPKNS_5TNodeE called 19382236 returned 100% blocks executed 100%
 19382236:   45:    int Balance(const TNode *node) {
 19382236:   46:        return Height(node->left) - Height(node->right);
call    0 returned 100%
call    1 returned 100%
        -:   47:    }
        -:   48:
function _ZN4TAvl9FixHeightEPNS_5TNodeE called 20305363 returned 100% blocks executed 100%
 20305363:   49:    void FixHeight(TNode *node) {
 20305363:   50:        node->height = std::max(Height(node->left), Height(node->right)) + 1;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
 20305363:   51:    }
        -:   52:
function _ZN4TAvl10RotateLeftEPNS_5TNodeE called 346534 returned 100% blocks executed 100%
   346534:   53:    TNode *RotateLeft(TNode *p) {
   346534:   54:        TNode *q = p->right;
   346534:   55:        p->right = q->left;
   346534:   56:        q->left = p;
   346534:   57:        FixHeight(p);
call    0 returned 100%
   346534:   58:        FixHeight(q);
call    0 returned 100%
   346534:   59:        return q;
        -:   60:    }
        -:   61:
function _ZN4TAvl11RotateRightEPNS_5TNodeE called 345930 returned 100% blocks executed 100%
   345930:   62:    TNode *RotateRight(TNode *p) {
   345930:   63:        TNode *q = p->left;
   345930:   64:        p->left = q->right;
   345930:   65:        q->right = p;
   345930:   66:        FixHeight(p);
call    0 returned 100%
   345930:   67:        FixHeight(q);
call    0 returned 100%
   345930:   68:        return q;
        -:   69:    }
        -:   70:
function _ZN4TAvl13BigRotateLeftEPNS_5TNodeE called 114946 returned 100% blocks executed 100%
   114946:   71:    TNode *BigRotateLeft(TNode *p) {
   114946:   72:        p->right = RotateRight(p->right);
call    0 returned 100%
   114946:   73:        return RotateLeft(p);
call    0 returned 100%
        -:   74:    }
        -:   75:
function _ZN4TAvl14BigRotateRightEPNS_5TNodeE called 115717 returned 100% blocks executed 100%
   115717:   76:    TNode *BigRotateRight(TNode *p) {
   115717:   77:        p->left = RotateLeft(p->left);
call    0 returned 100%
   115717:   78:        return RotateRight(p);
call    0 returned 100%
        -:   79:    }
        -:   80:
function _ZN4TAvl9RebalanceEPNS_5TNodeE called 18920435 returned 100% blocks executed 95%
 18920435:   81:    TNode *Rebalance(TNode *node) {
 18920435:   82:        if (node == nullptr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:            return nullptr;
        -:   84:        }
 18920435:   85:        FixHeight(node);
call    0 returned 100%
 18920435:   86:        int balanceRes = Balance(node);
call    0 returned 100%
 18920435:   87:        if (balanceRes == -2) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   230817:   88:            if (Balance(node->right) == 1) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
   114946:   89:                return BigRotateLeft(node);
call    0 returned 100%
        -:   90:            }
   115871:   91:            return RotateLeft(node);
call    0 returned 100%
 18689618:   92:        } else if (balanceRes == 2) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   230984:   93:            if (Balance(node->left) == -1) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
   115717:   94:                return BigRotateRight(node);
call    0 returned 100%
        -:   95:            }
   115267:   96:            return RotateRight(node);
call    0 returned 100%
        -:   97:        }
 18458634:   98:        return node;
        -:   99:    }
        -:  100:
function _ZN4TAvl6InsertEPNS_5TNodeEPcy called 19912964 returned 100% blocks executed 61%
 19912964:  101:    TNode *Insert(TNode *node, char *k, ull v) {
 19912964:  102:        if (node == nullptr) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  103:            try {
   992529:  104:                node = new TNode(k, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  105:            }
    =====:  106:            catch (std::bad_alloc &e) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  107:                std::cout << "ERROR: " << e.what() << "\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    =====:  108:                return nullptr;
        -:  109:            }
   992529:  110:            return node;
        -:  111:        }
 18920435:  112:        int res = strcmp(k, node->key);
 18920435:  113:        if (res < 0) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
  9640740:  114:            node->left = Insert(node->left, k, v);
call    0 returned 100%
  9279695:  115:        } else if (res > 0) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  9272224:  116:            node->right = Insert(node->right, k, v);
call    0 returned 100%
        -:  117:        }
 18920435:  118:        return Rebalance(node);
call    0 returned 100%
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  119:    }
        -:  120:
        -:  121:    TNode *RemoveMin(TNode *node, TNode *tmp) {
        -:  122:        if (tmp->left != nullptr) {
        -:  123:            tmp->left = RemoveMin(node, tmp->left);
        -:  124:        } else {
        -:  125:            TNode *rightSubNode = tmp->right;
        -:  126:            strcpy(node->key, tmp->key);
        -:  127:            node->value = tmp->value;
        -:  128:            delete tmp;
        -:  129:            tmp = rightSubNode;
        -:  130:        }
        -:  131:        return Rebalance(tmp);
        -:  132:    }
        -:  133:
        -:  134:    TNode *Remove(TNode *node, char *k) {
        -:  135:        if (node == nullptr) {
        -:  136:            return nullptr;
        -:  137:        }
        -:  138:        int res = strcmp(k, node->key);
        -:  139:        if (res < 0) {
        -:  140:            node->left = Remove(node->left, k);
        -:  141:        } else if (res > 0) {
        -:  142:            node->right = Remove(node->right, k);
        -:  143:        } else {
        -:  144:            TNode *leftSubNode = node->left;
        -:  145:            TNode *rightSubNode = node->right;
        -:  146:            if (leftSubNode == nullptr && rightSubNode == nullptr) {
        -:  147:                delete node;
        -:  148:                return nullptr;
        -:  149:            }
        -:  150:            if (rightSubNode == nullptr) {
        -:  151:                delete node;
        -:  152:                return leftSubNode;
        -:  153:            }
        -:  154:            if (leftSubNode == nullptr) {
        -:  155:                delete node;
        -:  156:                return rightSubNode;
        -:  157:            }
        -:  158:            node->right = RemoveMin(node, rightSubNode);
        -:  159:        }
        -:  160:        return Rebalance(node);
        -:  161:    }
        -:  162:
        -:  163:    TNode *Search(TNode *node, char *k) {
        -:  164:        if (node == nullptr) {
        -:  165:            return nullptr;
        -:  166:        }
        -:  167:        TNode *tmp = node;
        -:  168:        while (tmp != nullptr) {
        -:  169:            int res = strcmp(k, tmp->key);
        -:  170:            if (res < 0) {
        -:  171:                tmp = tmp->left;
        -:  172:            } else if (res > 0) {
        -:  173:                tmp = tmp->right;
        -:  174:            } else {
        -:  175:                return tmp;
        -:  176:            }
        -:  177:        }
        -:  178:        return nullptr;
        -:  179:    }
        -:  180:
        -:  181:public:
function _ZN4TAvlC2Ev called 1 returned 100% blocks executed 100%
        1:  182:    TAvl() : root(nullptr) {};
        -:  183:
        -:  184:    TNode *GetRoot() {
        -:  185:        return root;
        -:  186:    }
        -:  187:
function _ZN4TAvl3AddEPcy called 1000000 returned 100% blocks executed 100%
  1000000:  188:    void Add(char *k, ull v) {
  1000000:  189:        root = Insert(root, k, v);
call    0 returned 100%
  1000000:  190:    }
        -:  191:
        -:  192:    void Delete(char *k) {
        -:  193:        root = Remove(root, k);
        -:  194:    }
        -:  195:
        -:  196:    TNode *Find(char *k) {
        -:  197:        return Search(root, k);
        -:  198:    }
        -:  199:
function _ZN4TAvl10TreeDeleteEPNS_5TNodeE called 1985059 returned 100% blocks executed 100%
  1985059:  200:    void TreeDelete(TNode *node) {
  1985059:  201:        if (node != nullptr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   992529:  202:            TreeDelete(node->left);
call    0 returned 100%
   992529:  203:            TreeDelete(node->right);
call    0 returned 100%
   992529:  204:            delete node;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        -:  205:        }
  1985059:  206:    }
        -:  207:
function _ZN4TAvlD2Ev called 1 returned 100% blocks executed 100%
        2:  208:    ~TAvl() {
        1:  209:        TreeDelete(root);
call    0 returned 100%
        1:  210:    }
        -:  211:};
function main called 1 returned 100% blocks executed 75%
        1:  212:int main(int argc, char **argv) {
        1:  213:    int top = 1000000;
        2:  214:    TAvl tree;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  215:    kv tmp;
        1:  216:	if (top == 1000) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  217:		std::cout << "hello there\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  218:	}
        1:  219:    tmp.key = (char *) malloc(257);
        1:  220:    tmp.key[256] = '\0';
  1000001:  221:    for (int i = 0; i < top; i++) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1000000:  222:        std::cin >> tmp.key >> tmp.val;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
  1000000:  223:        tree.Add(tmp.key, tmp.val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  224:    }
        1:  225:    free(tmp.key);
        1:  226:    return 0;
function _GLOBAL__sub_I_main called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  227:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
